<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <!--
        PMS consists of two major parts: PMS itself and the third party software 
        needed to run it. While PMS itself is 100% pure Java, some of the third party 
        software is not. This means building a platform specific distribution boils 
        down to first building the pms.jar and then assembling all application resources. 
        
        Note that Maven 3 does not automatically install all dependencies, unlike Maven 2.
        To install all dependencies to your local repository, run the following commands:
        
            mvn com.savage7.maven.plugins:maven-external-dependency-plugin:resolve-external 
            mvn com.savage7.maven.plugins:maven-external-dependency-plugin:install-external 
        
        To build PMS, do:
        
            mvn clean package
        
        After building, the "target" directory will contain the binary.
        To generate a full source code report, do:
        
            mvn site 
        
        After generating, the "target/site" directory will contain the reports.
    -->

	<modelVersion>4.0.0</modelVersion>

	<groupId>github.com.taconaut</groupId>
	<artifactId>pms</artifactId>
	<version>1.82.0-mlx_0.9-SNAPSHOT</version> <!-- XXX don't forget to update project.version.short below -->

	<packaging>pom</packaging>
	<name>PMS</name>
	<url>http://www.ps3mediaserver.org/</url>
	<inceptionYear>2008</inceptionYear>

	<!-- this is not required, but is recommended for plugin version checks -->
	<prerequisites>
		<maven>2.2.1</maven>
	</prerequisites>

	<organization>
		<name>PS3 Media Server MLX</name>
		<url>http://www.ps3mediaserver.org/</url>
	</organization>

	<licenses>
		<license>
			<name>GNU General Public License version 2</name>
			<url>http://www.gnu.org/licenses/gpl-2.0.txt</url>
			<distribution>manual</distribution>
		</license>
	</licenses>

	<description>
		PS3 Media Server is a cross-platform DLNA-compliant UPnP Media Server.
		Originally written to support the PlayStation 3, PS3 Media Server has been
		expanded to support a range of other media renderers, including smartphones,
		televisions, music players and more.
	</description>

	<scm>
		<connection>scm:git:git@github.com:taconaut/pms-mlx.git</connection>
		<developerConnection>scm:git:git@github.com:taconaut/pms-mlx.git</developerConnection>
		<tag>master</tag>
		<url>git@github.com:taconaut/pms-mlx.git</url>
	</scm>

	<issueManagement>
		<system>Github</system>
		<url>https://github.com/taconaut/pms-mlx/issues</url>
	</issueManagement>

	<parent>
		<groupId>org.sonatype.oss</groupId>
		<artifactId>oss-parent</artifactId>
		<version>7</version>
	</parent>

	<modules>
		<module>core</module>
		<module>plugins</module>
		<module>packaging</module>
	</modules>

	<developers>
		<developer>
			<name>shagrath</name>
		</developer>
		<developer>
			<name>tcox</name>
		</developer>
		<developer>
			<name>SubJunk</name>
		</developer>
		<developer>
			<name>taconaut</name>
		</developer>
		<developer>
			<name>tomeko</name>
		</developer>
		<developer>
			<name>chocolateboy</name>
		</developer>
		<developer>
			<name>ditlew</name>
		</developer>
		<developer>
			<name>Raptor399</name>
		</developer>
		<developer>
			<name>renszarv</name>
		</developer>
		<developer>
			<name>happy.neko</name>
		</developer>
	</developers> 
        
	<properties>       
		<jgoodies-common-version>1.2.1</jgoodies-common-version>
		<jgoodies-forms-version>1.4.2</jgoodies-forms-version>
		<jgoodies-looks-version>2.4.2</jgoodies-looks-version>
		<cuelib-version>1.2.1-2008-06-13</cuelib-version>
		<junrar-version>0.5</junrar-version>
		<mediautil-version>1.0</mediautil-version>
		<jcalendar-version>1.1.1</jcalendar-version>
		<jgoodies-binding-version>2.6.1</jgoodies-binding-version>
	</properties>

	<pluginRepositories>
		<pluginRepository>
			<id>ossrh</id>
			<name>Sonatype OSS Repository</name>
			<url>http://oss.sonatype.org/content/groups/public</url>
			<layout>default</layout>
		</pluginRepository>
	</pluginRepositories>

	<build>
		<plugins>		

            <!-- This plugin will take care of installing the external dependencies 
                that do not exist in a public Maven repository. That is why we store some 
                jar files in the "src/main/external-resources/lib" directory and have this 
                plugin take care of the installation at build time. 
                Note: The plugin does not work automatically in Maven 3 if included in the project
                requiering the liraries (see http://code.google.com/p/maven-external-dependency-plugin/issues/detail?id=8#c3
                for details).
                
                To install the required dependencies manually, execute the following commands: 
                
                mvn com.savage7.maven.plugins:maven-external-dependency-plugin:resolve-external 
                mvn com.savage7.maven.plugins:maven-external-dependency-plugin:install-external 
                
                Checksums can be calculated with "openssl sha1 [filename]". 
                See: http://code.google.com/p/maven-external-dependency-plugin/issues/detail?id=8#c4 -->
			<plugin>
				<groupId>com.savage7.maven.plugins</groupId>
				<artifactId>maven-external-dependency-plugin</artifactId>
				<version>0.5</version>
				<inherited>false</inherited>
				<configuration>
					<stagingDirectory>${project.build.directory}/dependencies/</stagingDirectory>
					<createChecksum>true</createChecksum>
					<skipChecksumVerification>false</skipChecksumVerification>
					<force>false</force>
					<artifactItems>

						<artifactItem>
							<groupId>com.jgoodies</groupId>
							<artifactId>common</artifactId>
							<version>${jgoodies-common-version}</version>
							<packaging>jar</packaging>
							<install>true</install>
							<force>false</force>
							<downloadUrl>http://www.jgoodies.com/download/libraries/{artifactId}/jgoodies-{artifactId}-{_version}.zip</downloadUrl>
							<checksum>5a4cf9866a7339e64e52f46101b5b13fe50b9c80</checksum>
							<extractFile>jgoodies-{artifactId}-{version}/jgoodies-{artifactId}-{version}.{packaging}</extractFile>
							<extractFileChecksum>f3955d59f2263fb889b02febec74377647a2eaba</extractFileChecksum>
						</artifactItem>

						<artifactItem>
							<groupId>com.jgoodies</groupId>
							<artifactId>forms</artifactId>
							<version>${jgoodies-forms-version}</version>
							<packaging>jar</packaging>
							<install>true</install>
							<force>false</force>
							<downloadUrl>http://www.jgoodies.com/download/libraries/{artifactId}/jgoodies-{artifactId}-{_version}.zip</downloadUrl>
							<checksum>83bb8780a38cb6bc854964da298f0f657868871d</checksum>
							<extractFile>jgoodies-{artifactId}-{version}/jgoodies-{artifactId}-{version}.{packaging}</extractFile>
							<extractFileChecksum>de8a67990cbeae62910cc2022f06c466476f2f2b</extractFileChecksum>
						</artifactItem>

						<artifactItem>
							<groupId>com.jgoodies</groupId>
							<artifactId>looks</artifactId>
							<version>${jgoodies-looks-version}</version>
							<packaging>jar</packaging>
							<install>true</install>
							<force>false</force>
							<downloadUrl>http://www.jgoodies.com/download/libraries/{artifactId}/jgoodies-{artifactId}-{_version}.zip</downloadUrl>
							<checksum>ccba2963e63c8349f8a16a10abfd5102a94a182b</checksum>
							<extractFile>jgoodies-{artifactId}-{version}/jgoodies-{artifactId}-{version}.{packaging}</extractFile>
							<extractFileChecksum>535745c08e342f7ea78556baad44a4a52ffb7863</extractFileChecksum>
						</artifactItem>

						<artifactItem>
							<groupId>jwbroek.cuelib</groupId>
							<artifactId>cuelib</artifactId>
							<version>${cuelib-version}</version>
							<packaging>jar</packaging>
							<downloadUrl>http://cuelib.googlecode.com/files/cuelib-${cuelib-version}.jar</downloadUrl>
							<checksum>d03b6b960b3b83a2a419e8b5f07b6ba4bd18387b</checksum>
						</artifactItem>

                        <artifactItem>
                            <groupId>de.innosystec</groupId>
                            <artifactId>java-unrar</artifactId>
                            <version>${junrar-version}</version>
                            <packaging>jar</packaging>
                            <install>true</install>
                            <force>false</force>
                            <downloadUrl>http://cloud.github.com/downloads/edmund-wagner/junrar/java-unrar-${junrar-version}.zip</downloadUrl>
                            <checksum>1e621c27dba2feeac400a96042f55775dc47f990</checksum>
                            <extractFile>java-unrar-${junrar-version}/java-unrar-${junrar-version}.jar</extractFile>
                            <extractFileChecksum>111074096b6bdce79fa09842143c336a5cf64fcb</extractFileChecksum>
                        </artifactItem>

						<artifactItem>
							<groupId>mediautil</groupId>
							<artifactId>mediautil</artifactId>
							<version>${mediautil-version}</version>
							<packaging>jar</packaging>
							<install>true</install>
							<force>false</force>
							<downloadUrl>http://downloads.sourceforge.net/project/mediachest/MediaUtil/Version%201.0/mediautil-1.zip</downloadUrl>
							<checksum>aa7ae51bb24a9268a8e57c6afe478c4293f84fda</checksum>
							<extractFile>mediautil-${mediautil-version}/mediautil-${mediautil-version}.jar</extractFile>
							<extractFileChecksum>e843cd55def75dce57123c79b7f36caca4841466</extractFileChecksum>
						</artifactItem>

						<artifactItem>
							<groupId>org.freixas</groupId>
							<artifactId>jcalendar</artifactId>
							<version>${jcalendar-version}</version>
							<packaging>jar</packaging>
							<downloadUrl>http://sourceforge.net/projects/flib/files/flib/FLib%201.1.1/jcalendar.jar</downloadUrl>
							<checksum>83eb4b1a4823daf3b5bea61958cf6097930f74fb</checksum>
						</artifactItem>

						<artifactItem>
							<groupId>com.jgoodies</groupId>
							<artifactId>binding</artifactId>
							<version>${jgoodies-binding-version}</version>
							<packaging>jar</packaging>
							<install>true</install>
							<force>false</force>
							<downloadUrl>http://www.jgoodies.com/download/libraries/{artifactId}/jgoodies-{artifactId}-{_version}.zip</downloadUrl>
							<checksum>52be0a826b13cb7bf6a46a3a870aa60e5f9d6f45</checksum>
							<extractFile>jgoodies-{artifactId}-{version}/jgoodies-{artifactId}-{version}.{packaging}</extractFile>
							<extractFileChecksum>f60c6281a5c65e35b29cc41297b496a0df107dd3</extractFileChecksum>
						</artifactItem>

					</artifactItems>

				</configuration>

				<executions>
					<execution>
						<id>clean-external-dependencies</id>
						<phase>clean</phase>
						<goals>
							<!-- mvn com.savage7.maven.plugins:maven-external-dependency-plugin:clean-external -->
							<goal>clean-external</goal>
						</goals>
					</execution>

					<execution>
						<id>resolve-install-external-dependencies</id>
						<!-- Not bound to a phase, you need to execute these manually. See above -->
						<phase>process-resources</phase>
						<goals>
							<!-- mvn com.savage7.maven.plugins:maven-external-dependency-plugin:resolve-external -->
							<goal>resolve-external</goal>

							<!-- mvn com.savage7.maven.plugins:maven-external-dependency-plugin:install-external -->
							<goal>install-external</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
